# Importing dataset
setwd("/Users/alfredo/Documents/Task1/Data/")
# Importing dataset
setwd("/Users/arossisa/Documents/Task1/Data/")
load("WVS_TimeSeries_R_v1_5.rdata")
library(foreign)
evs <- read.dta("/Users/arossisa/Documents/ZA4804_v3-1-0.dta")
library(readstata13)
library(readstata13)
evs <- read.dta13("/Users/arossisa/Documents/ZA4804_v3-1-0.dta")
replicate_simulation()
library(lme4)
library(glue)
library(vctrs)
library(simglm)
library(magrittr)
replicate_simulation
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.10),
error = list(ther_sim = T), # variance = 1
randomeffect = list(var2 = list(variance = 1, var_level=2)),
replications = 1000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
set.seed(123)
t = Sys.time()
#launch simulation
power_analysis <- replicate_simulation(sim_arguments) %>%
compute_statistics(sim_arguments)
Sys.time() - t
power_analysis
View(power_analysis)
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.10),
error = list(variance = 1), #  ther_sim = T
randomeffect = list(var2 = list(variance = 1, var_level=2)),
replications = 1000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
set.seed(123)
t = Sys.time()
#launch simulation
power_analysis_var1 <- replicate_simulation(sim_arguments) %>%
compute_statistics(sim_arguments)
Sys.time() - t
View(power_analysis_var1)
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.05),
error = list(ther_sim = T), # variance = 1
randomeffect = list(var2 = list(variance = 1, var_level=2)),
replications = 10000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.05),
error = list(ther_sim = T), # variance = 1
randomeffect = list(var2 = list(ther_sim = T, var_level=2)), # variance = 1
replications = 1000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
set.seed(123)
t = Sys.time()
#launch simulation
power_analysis <- replicate_simulation(sim_arguments) %>%
compute_statistics(sim_arguments)
power_analysis
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.10),
error = list(ther_sim = T), # variance = 1
randomeffect = list(var2 = list(ther_sim = T, var_level=2)), # variance = 1
replications = 1000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
set.seed(123)
t = Sys.time()
#launch simulation
power_analysis <- replicate_simulation(sim_arguments) %>%
compute_statistics(sim_arguments)
Sys.time() - t
power_analysis
library(misty)
library(misty)
spss = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
View(spss)
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
evs_old = read.sav("/Users/arossisa/Documents/ZA4804_v3-1-0.sav")
View(evs_old)
unique(evs_old$S002)
unique(evs_old$S003)
evs_old2 = evs_old[evs_old$S003==250,]
unique(evs_old2$S002)
View(evs_old2)
wvs_data = WVS_TimeSeries_R_v1_5
View(wvs_data)
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.10),
error = list(variance = 10), # variance = 1
randomeffect = list(var2 = list(ther_sim = T, var_level=2)), # variance = 1
replications = 1000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
set.seed(123)
#launch simulation
power_analysis3 <- replicate_simulation(sim_arguments) %>%
compute_statistics(sim_arguments)
sim_arguments <- list(
formula = dv ~ 1 + inequality + (1 | country_years), REML=FALSE,
fixed = list(inequality = list(var_type = 'continuous', mean=0, sd=1,
var_level=2)),
reg_weights = c(intercept=0, inequality=.10),
error = list(variance = 10), # variance = 1
randomeffect = list(var2 = list(variance = .5, var_level=2)), # variance = 1
replications = 1000,
model_fit=list(model_function="lmer"),
extract_coefficients = TRUE,
sample_size = list(level1 = 10, level2 = 10))
set.seed(123)
#launch simulation
power_analysis4 <- replicate_simulation(sim_arguments) %>%
compute_statistics(sim_arguments)
View(power_analysis3)
View(power_analysis4)
# https://www.rips-irsp.com/articles/10.5334/irsp.90/
# https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html
# https://cran.r-project.org/web/packages/ordinal/vignettes/clmm2_tutorial.pdf
#https://www.stata.com/features/overview/multilevel-ordered-logistic-models/
### lapply
library(parallel)
f <- function(i) {
lmer(Petal.Width ~ . - Species + (1 | Species), data = iris)
}
system.time({
library(lme4)
save1 <- lapply(1:100, f)
})
### mclapply
library(parallel)
f <- function(i) {
lmer(Petal.Width ~ . - Species + (1 | Species), data = iris)
}
system.time({
library(lme4)
save2 <- mclapply(1:100, f)
})
f <- function(i) {
lmer(Petal.Width ~ . - Species + (1 | Species), data = iris)
}
system.time({
library(lme4)
save1 <- lapply(1:100, f)
})
### mclapply
library(parallel)
f <- function(i) {
lmer(Petal.Width ~ . - Species + (1 | Species), data = iris)
}
system.time({
library(lme4)
save2 <- mclapply(1:100, f)
})
# https://www.rips-irsp.com/articles/10.5334/irsp.90/
# https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html
# https://cran.r-project.org/web/packages/ordinal/vignettes/clmm2_tutorial.pdf
#https://www.stata.com/features/overview/multilevel-ordered-logistic-models/
### lapply
library(parallel)
f <- function(i) {
lmer(Petal.Width ~ . - Species + (1 | Species), data = iris)
}
system.time({
library(lme4)
save1 <- lapply(1:1000, f)
})
### mclapply
library(parallel)
f <- function(i) {
lmer(Petal.Width ~ . - Species + (1 | Species), data = iris)
}
system.time({
library(lme4)
save2 <- mclapply(1:1000, f)
})
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
View(evs2017)
View(evs2017)
View(wvs_data)
View(evs_old)
# Importing dataset
setwd("/Users/arossisa/Documents/Task1/Data/")
# Importing dataset
setwd("/Users/arossisa/Documents/Task1/Data/")
load("WVS_TimeSeries_R_v1_5.rdata")
wvs_data = WVS_TimeSeries_R_v1_5
library(misty)
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
evs_old = read.sav("/Users/arossisa/Documents/ZA4804_v3-1-0.sav")
aux = rbind(wvs_data,evs_old)
library(tidyverse)
rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
library(plyr)
install.packages(plyr)
install.packages("plyr")
library(plyr)
rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
a = rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
View(a)
aux = rbind.fill(wvs_data,evs_old)
View(aux)
View(wvs_data)
unique(evs_old$S001)
unique(wvs_data$S001)
a= evs_old[evs_old$S001==2,]
a= evs_old[evs_old$S001==1,]
wvs_evs2017 = rbind.fill(wvs_data,evs_old)
# Importing dataset
setwd("/Users/arossisa/Documents/Task1/Data/")
wvs_data = load("WVS_TimeSeries_R_v1_5.rdata")
wvs_data
wvs_data = WVS_TimeSeries_R_v1_5
library(misty)
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
evs_old = read.sav("/Users/arossisa/Documents/ZA4804_v3-1-0.sav")
setwd("/Users/arossisa/Documents/Task1/Results/")
wvs_evs2017 = rbind.fill(wvs_data,evs_old)
ls(WVS_TimeSeries_R_v1_5)
rm(WVS_TimeSeries_R_v1_5)
aux = rbind.fill(wvs_data,evs_old)
aux = rbind.fill(wvs_data,evs_old)
View(evs_old)
View(wvs_data)
table(wvs_data$S003,wvs_data$S002)
table(evs_old$S003,evs_old$S002)
table(evs_old$S003,evs_old$S002EVS)
table(evs_old$S002)
table(evs_old$s002vs)
table(evs_old$S002EVS)
wvs_data$s002vs = wvs_data$S002
aux = rbind.fill(wvs_data,evs_old)
aux = rbind.fill(wvs_data,evs_old)
aux = rbind.fill(wvs_data,evs_old)
# Importing Main WVS dataset
setwd("/Users/arossisa/Documents/Task1/Data/")
load("WVS_TimeSeries_R_v1_5.rdata")
wvs_data = WVS_TimeSeries_R_v1_5
# Removing the old dataset to open memory space
rm(WVS_TimeSeries_R_v1_5)
# Importing EVS old waves and current wave
library(misty)
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
evs_old = read.sav("/Users/arossisa/Documents/ZA4804_v3-1-0.sav")
setwd("/Users/arossisa/Documents/Task1/Results/")
# Merging EVS old and WVS
library(plyr)
wvs_data$s002vs = wvs_data$S002
aux = rbind.fill(wvs_data,evs_old)
aux2 = aux %>% filter(duplicated(cbind("s002vs",
"S003",
"S006",
"S007",
"S008")))
aux2 = aux %>% filter(duplicated(cbind("s002vs",
"S003",
#"S006",
"S007",
"S008")))
aux2 = aux %>% filter(duplicated(cbind("s002vs",
"S003",
#"S006",
#"S007",
"S008")))
View(evs2017)
library(readxl)
dict_evs2017 <- read_excel("~/Documents/Task1/Data/ZA7505_VariableCorrespondence.xlsx",
sheet = "EVS_WVS_Variable_Correspondence")
View(dict_evs2017)
names(evs2017) = dict_evs2017$`WVS 7
Variable Name`
names(evs2017) = dict_evs2017[,5]
str(dict_evs2017[,5])
str(as.vector(dict_evs2017[,5]))
names(evs2017) = as.vector(dict_evs2017[,5])
a = as.vector(dict_evs2017[,5])
View(a)
as.character(a)
a= as.character(a)
dict_evs2017 <- read_excel("~/Documents/Task1/Data/ZA7505_VariableCorrespondence.xlsx",
sheet = "EVS_WVS_Variable_Correspondence")
a = (dict_evs2017[,5])
a = (dict_evs2017[,7])
a = as.character(dict_evs2017[,7])
a
a = as.vector(dict_evs2017[,7])
View(a)
str(a)
a$`WVS 7
Variable Name`
column_wvs = as.vector(dict_evs2017[,7])
names(evs2017) = column_wvs[,1]
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
names(evs2017)
column_wvs[,1]
names(evs2017) = column_wvs[,1]
names(evs2017)
column_wvs[,1]
t(column_wvs[,1])
teste = dplyr::pull(column_wvs, column_wvs[,1])
names(column_wvs)
names(column_wvs) = "aux"
names(column_wvs)
teste = dplyr::pull(column_wvs, aux)
teste
dict_evs2017 <- read_excel("~/Documents/Task1/Data/ZA7505_VariableCorrespondence.xlsx",
sheet = "EVS_WVS_Variable_Correspondence")
dict_evs2017 <- read_excel("~/Documents/Task1/Data/ZA7505_VariableCorrespondence.xlsx",
sheet = "EVS_WVS_Variable_Correspondence")
names(dict_evs2017[,7]) = "vector_evs"
vector_evs = dplyr::pull(dict_evs2017[,7], vector_evs)
names(dict_evs2017[,7])
names(dict_evs2017[,7]) = "vector_evs"
names(dict_evs2017[,7])
column_wvs = as.vector(dict_evs2017[,7])
names(column_wvs[,1]) = "vector_evs"
names(column_wvs[,1])
column_wvs = as.vector(dict_evs2017[,7])
names(column_wvs) = "vector_evs"
names(column_wvs)
vector_evs = dplyr::pull(column_wvs, vector_evs)
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
names(evs2017) = vector_evs
library(readxl)
dict_wvs <- read_excel("~/Documents/Task1/Data/F00003844-WVS_Time_Series_List_of_Variables_and_equivalences.xlsx",
skip = 1)
View(dict_wvs)
column_wvs = as.vector(dict_wvs[,7])
View(column_wvs)
names(column_wvs) = "vector_wvs"
vector_wvs = dplyr::pull(column_wvs, vector_wvs)
names(aux) = vector_wvs
View(aux)
names(aux)[1070]
names(aux)[1080]
names(aux)[1060]
aux = rbind.fill(wvs_data,evs_old)
aux = rbind.fill(wvs_data,evs_old)
aux = rbind.fill(wvs_data,evs_old)
# Importing Main WVS dataset
setwd("/Users/arossisa/Documents/Task1/Data/")
load("WVS_TimeSeries_R_v1_5.rdata")
wvs_data = WVS_TimeSeries_R_v1_5
# Removing the old dataset to open memory space
rm(WVS_TimeSeries_R_v1_5)
# Importing EVS old waves and current wave
library(misty)
evs2017 = read.sav("/Users/arossisa/Documents/ZA7505_v1-0-0.sav")
evs_old = read.sav("/Users/arossisa/Documents/ZA4804_v3-1-0.sav")
setwd("/Users/arossisa/Documents/Task1/Results/")
# Merging EVS old and WVS
library(plyr)
wvs_data$s002vs = wvs_data$S002
aux = rbind.fill(wvs_data,evs_old)
wvs_evs_old = rbind.fill(wvs_data,evs_old)
wvs_evs_old = rbind.fill(wvs_data,evs_old)
#
wvs_evs_old = rbind.fill(wvs_data,evs_old)
